load(file = "processed_data/donnees.RData")
source(file = "scripts/02_fonctions_graphiques.R")
source(file = "scripts/03_fonctions_non_graphiques.R")

library(tidyverse)
library(corrplot)
library(RColorBrewer)
library(ggthemr)

# ---------------------------------------------------------------------------
# PRODUCTION DES GRAPHIQUES
# ---------------------------------------------------------------------------


# Définition d'une palette de couleurs

ggthemr("earth", type = "outer", layout = "scientific", spacing = 2)
bg_col <- rgb(red = 67, green = 61, blue = 54, maxColorValue = 255)
cols <- ggthemr::swatch()[c(2,3,5)]

# Sur l'ensemble du jeu de données

## Distribution des variables
## Corrélations

cor_tot <- data_simp %>%
  select(cond, cond25, temp, volt, puiss, intens, pen1.5c)

# Récupérer l'ordre des variables de cette matrice pour le garder constant pour la suite
cor_tot_order <- data_simp %>%
  select(cond, cond25, temp, volt, puiss, intens, pen1.5c) %>%
  as.matrix() %>% 
  Hmisc::rcorr(type = c("spearman")) %>% 
  .[[1]] %>% 
  corrMatOrder(order = "hclust")

# par année. Pas de temp en 2018

cor_2018 <- data_simp %>%
  filter(annee == 2018) %>%
  mef()

cor_2019 <- data_simp %>%
  filter(annee == 2019) %>%
  mef()

cor_2020 <- data_simp %>%
  filter(annee == 2020) %>% 
  mef()

cor_1a <- data_simp %>%
  filter(anodes == 1) %>%
  mef()

cor_2a <- data_simp %>%
  filter(anodes == 2) %>%
  mef()

cor_cran2 <- data_simp %>%
  filter(cran == 2) %>%
  mef()

cor_cran3 <- data_simp %>%
  filter(cran == 3) %>%
  mef()

cor_cran4 <- data_simp %>%
  filter(cran == 4) %>%
  mef()

cor_epa_bateau <- data_simp %>%
  filter(meth == "EPA bateau") %>%
  mef()

cor_epa_pied <- data_simp %>%
  filter(meth == "EPA pied") %>%
  mef()

cor_inv <- data_simp %>%
  filter(meth == "Inv") %>%
  mef()

# Intensité - conductivité

prov <- data %>%
  filter(!is.na(conductivite), !is.na(intensite), !is.na(cran)) #%>% 
#  filter(annee < 2020)

# Pour afficher les équations
# Production des étiquettes avec les équations
labels <- map(.x = (2:4),
              .f = model_simp,
              df = prov,
              cond = "conductivite")

prov <- prov %>% 
  mutate(intensite = round(intensite, 2)) %>% 
  rename(`Conductivité` = conductivite, `Intensité` = intensite, Cran = cran, Station = station)


graph_intens_cond <- ggplot(data = prov, aes(x = `Conductivité`, y = `Intensité`,
                                             col = Cran, label = Station)) +
  geom_point() +
  geom_smooth(method = 'lm', se = FALSE) +
  labs(x = "Conductivité (\U00B5S/cm)", y = "Intensité (A)", col = "Cran") +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  theme(plot.background = element_rect(fill = bg_col),
        panel.background = element_rect(fill = bg_col),
        text = element_text(size = 15)) +
  annotate(geom = "text", x = 200, y = seq(from = 11.7, to = 10.3, by = -0.7), label = labels,
           col = cols) +
  scale_color_manual(values = cols)

graph_intens_cond

graph_intens_cond <- plotly::ggplotly(graph_intens_cond)

# meme chose avec conductivité à 25°C
prov <- data %>%
  filter(!is.na(conductivite_25), !is.na(intensite), !is.na(cran))

labels <- map(.x = (2:4),
              .f = model_simp,
              df = prov,
              cond = "conductivite_25")

prov <- prov %>% 
  mutate(intensite = round(intensite, 2)) %>% 
  rename(`Conductivité à 25°C` = conductivite_25, `Intensité` = intensite, Cran = cran, Station = station)

graph_intens_cond_25 <- ggplot(data = prov, aes(x = `Conductivité à 25°C`, y = `Intensité`, col = Cran, label = Station)) +
  geom_point() +
  geom_smooth(method = 'lm', se = FALSE) +
  labs(x = "Conductivité à 25°C(\U00B5S/cm)", y = "Intensité (A)", col = "Cran") +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  theme(plot.background = element_rect(fill = bg_col),
        panel.background = element_rect(fill = bg_col),
        text = element_text(size = 15)) +
  annotate(geom = "text", x = 200, y = seq(from = 11.7, to = 10.3, by = -0.7), label = labels,
           col = cols) +
  scale_color_manual(values = cols)

graph_intens_cond_25

graph_intens_cond_25 <- plotly::ggplotly(graph_intens_cond_25)


# -----------------------------------------------------------------------
# Avec la variable qualitative cran



# Lien entre les valeurs d'une année sur l'autre ?

## Liste des stations avec 2 ans de données
sta_2ans <- data %>%
  group_by(station) %>% 
  tally() %>% 
  filter(n > 1) %>% 
  pull(station)

data_2ans <- data %>% 
  filter(station %in% sta_2ans)

# -----------------------------------------------------------------------
# Lien entre mesures penny à 1m et 1.5m

# df <- data
# annee_sel <- 2018

# Pour afficher les équations
labels <- map(.x = (2018:2019), .f = model_simp2, df = data)

penny_1_1.5_scatterplot <- data %>% 
  filter(annee < 2020) %>% 
  mutate(annee = as.factor(annee)) %>% 
  ggplot(aes(x = penny_1m_c, y = penny_1.5m_c, label = station, color = annee)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme(legend.title=element_blank(),
        plot.background = element_rect(fill = bg_col),
        panel.background = element_rect(fill = bg_col),
        text = element_text(size = 15)) +
  scale_x_continuous(labels = scales::number_format(accuracy = 1)) +
  labs(x = "Mesure Penny à 1m du centre", y = "Mesure Penny à 1,5m du centre") +
  annotate(geom = "text", x = 2.5, y = c(4.2, 4.7), label = labels,
           col = cols[1:2]) +
  scale_color_manual(values = cols[1:2])


penny_1_1.5_scatterplot <-  plotly::ggplotly(penny_1_1.5_scatterplot)

# Mise à jour des popups
penny_1_1.5_scatterplot$x$data[[1]]$text <- penny_1_1.5_scatterplot$x$data[[1]]$text %>% 
  str_replace_all(pattern = "station:", replacement = "Station :") %>% 
  str_replace_all(pattern = "penny_1m:", replacement = "Penny à 1m :") %>% 
  str_replace_all(pattern = "penny_1.5m:", replacement = "Penny à 1,5m :") %>% 
  str_replace_all(pattern = "annee", replacement = "Année ")

penny_1_1.5_scatterplot$x$data[[2]]$text <- penny_1_1.5_scatterplot$x$data[[2]]$text %>% 
  str_replace_all(pattern = "station:", replacement = "Station :") %>% 
  str_replace_all(pattern = "penny_1m:", replacement = "Penny à 1m :") %>% 
  str_replace_all(pattern = "penny_1.5m:", replacement = "Penny à 1,5m :") %>% 
  str_replace_all(pattern = "annee", replacement = "Année ")


# -----------------------------------------------------------------------
# Relation conductivité - Penny

data_sel <- data %>% 
  select(conductivite, penny_1.5m_c, station, cran) %>% 
  drop_na()

# ggplot(data = data_sel, aes(x = conductivite, y = penny_1.5m, col = cran)) +
#   geom_point() +
#   geom_smooth(method = 'lm', se = F)
# 
# df <- data_sel
# cran_sel <- 2

# Pour afficher les équations


labels <- map(.x = (2:4), .f = model_simp3, df = data_sel)

cond_penny_scatterplot <- data %>% 
  ggplot(aes(x = conductivite_25, y = penny_1.5m_c, label = station, color = cran)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  scale_x_continuous(labels = scales::number_format(accuracy = 1)) +
  labs(x = "Conductivité à 25°C(\U00B5S/cm)", y = "Mesure Penny à 1,5m") +
  annotate(geom = "text", x = 410, y = c(5, 4.5, 4), label = labels,
           col = cols[1:3]) +
  scale_color_manual(values = cols[1:3]) +
  theme(legend.title = element_text("Cran"),
        plot.background = element_rect(fill = bg_col),
        panel.background = element_rect(fill = bg_col),
        text = element_text(size = 15))


cond_penny_scatterplot <-  plotly::ggplotly(cond_penny_scatterplot)

cond_penny_scatterplot$x$data[[1]]$text <- cond_penny_scatterplot$x$data[[1]]$text %>% 
  str_replace_all(pattern = "station:", replacement = "Station :") %>% 
  str_replace_all(pattern = "conductivite_25:", replacement = "Conductivité :") %>% 
  str_replace_all(pattern = "penny_1.5m:", replacement = "Penny à 1,5m :") %>% 
  str_replace_all(pattern = "cran", replacement = "Cran ")

cond_penny_scatterplot$x$data[[2]]$text <- cond_penny_scatterplot$x$data[[2]]$text %>% 
  str_replace_all(pattern = "station:", replacement = "Station :") %>% 
  str_replace_all(pattern = "conductivite_25:", replacement = "Conductivité :") %>% 
  str_replace_all(pattern = "penny_1.5m:", replacement = "Penny à 1,5m :") %>% 
  str_replace_all(pattern = "cran", replacement = "Cran ")

cond_penny_scatterplot$x$data[[3]]$text <- cond_penny_scatterplot$x$data[[3]]$text %>% 
  str_replace_all(pattern = "station:", replacement = "Station :") %>% 
  str_replace_all(pattern = "conductivite_25:", replacement = "Conductivité :") %>% 
  str_replace_all(pattern = "penny_1.5m:", replacement = "Penny à 1,5m :") %>% 
  str_replace_all(pattern = "cran", replacement = "Cran ")


# -----------------------------------------------------------------------
# La mesure Penny à 1,50m est-elle corrélée à d'autre variables ?



tab_bivar_penny <- map(.x = c("dist_anode_cathode", "larg_moy", "prof_moy", "larg_mesure", "prof_mesure",
                  "conductivite_25", "temp", "voltage", "puissance", "intensite", "conductivite"),
           .f = model_simp4, df = data) %>% 
  reduce(rbind)

# -----------------------------------------------------------------------

# -----------------------------------------------------------------------
# tableau croisé du cran 2018 vs cran 2019
xtab_cran <- data_2ans %>% select(station, annee, cran, dept) %>% 
  pivot_wider(id_cols = c(station, dept), names_from = annee, names_prefix = "annee", values_from = cran) %>% 
  select(-station) %>% 
  rpivotTable::rpivotTable(rows="annee2018", cols=c("annee2019"),width="100%", height="400px")










# -----------------------------------------------------------------------
# Sauvegarde pour produire le doc html

rm(cor_tot_order, prov, labels)

save.image(file = "processed_data/graphiques.RData")
























