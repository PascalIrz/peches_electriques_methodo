#' Produire l'histogramme d'une des variables du jdd
#'
#' @param x nom de la variable
#' @param data nom du dataframe
#' @param xlab étiquette x
#' @param type type de df, type = c("pêches", "stations")
#'
#' @return un histo ggplot
#' @export
#'
#' @examples
graph_histo <- function(x, data, xlab, type = c("pêches", "stations")) {
  
  if (type == "stations") {data <- data %>% select(station, x) %>% unique()}
  if (type == "stations") {ylab <- "Nb de stations"
  } else {
    ylab <- "Nb de pêches"}
  
  moy <- data %>% pull(x) %>% mean(na.rm = TRUE)
  range <- data %>% pull(x) %>% range(na.rm = TRUE)
  amp <- range[2] - range [1]
  label = paste0("moyenne : ", round(moy, digits = 2))
  
  ggplot(data = data, aes(x = get(x))) +
    geom_histogram(bins = 10) +
    labs(x = paste0(xlab, " - ", label), y = ylab) +
    geom_vline(xintercept = moy, linetype = "longdash", size = 0.7, col = "limegreen") +
    theme(text = element_text(size = 20)) +
    scale_y_continuous(labels = scales::number_format(accuracy = 1))
  
}



#' Title
#'
#' @param data 
#' @param var_qual 
#' @param var_qual_label 
#' @param type 
#'
#' @return
#' @export
#'
#' @examples
graph_distri_var_qual <- function(data, var_qual, var_qual_label, type = c("stations", "pêches")) {
  
  if (type == "stations") {data <- data %>% select(station, var_qual) %>% unique()}
  if (type == "stations") {ylab <- "Nb de stations"
  } else {
    ylab <- "Nb de pêches"}
  
  data %>%
    pull(get(var_qual)) %>% 
    table() %>% 
    as.data.frame() %>%
    magrittr::set_colnames(c(var_qual, "n_obs")) %>% 
    ggplot(aes(x = as.factor(get(var_qual)), y = n_obs)) +
    geom_bar(stat = 'Identity', fill = "mediumseagreen") +
    labs(x = var_qual_label, y = ylab) +
    theme(text = element_text(size = 20))
  
}


# Fonction de production des graphique matrices de corrélation
# L'ordre des variables est soit conservé du dataframe ("original") soit fonction des proximités en CAH ("hclust")
graph_corrplot <- function(df, order = c("hclust", "original")) {
  
  M <- df %>% 
    as.matrix() %>% 
    Hmisc::rcorr(type = c("spearman"))
  
  corrplot.mixed(M$r, p.mat = M$P, sig.level = .05, upper = "ellipse", tl.cex = 0.8,
                 order = order)
}



graph_var_qual_var_quant <- function(data, var_quant, var_quant_label, var_qual, var_qual_label) {
  
  data %>% 
    filter(!is.na(get(var_quant)) & !is.na(get(var_qual))) %>% 
    ggplot(aes(x = as.factor(get(var_qual)), y = get(var_quant))) +
    geom_boxplot(
      #fill = brewer.pal(name = "Dark2", n = 3)[2]
    ) +
    labs(x = var_qual_label, y = var_quant_label) +
    theme(text = element_text(size = 20))
  
}


comparer_annees_geom_point <- function(variable, df) {
  
  df %>% 
    select(station, dept, annee, variable) %>% 
    pivot_wider(id_cols = c(station, dept), names_from = annee, values_from = variable) %>% 
    ggplot(aes(x = `2018`, y = `2019`, col = as.factor(dept))) +
    geom_point() +
    labs(title = variable) +
    geom_abline(aes(slope = 1, intercept = 0), color = 'red', linetype = 'dotted', size = 1.2) +
    #     scale_color_brewer(palette = "Dark2") +
    scale_x_continuous(limits = c(0, NA)) +
    scale_y_continuous(limits = c(0, NA)) +
    labs(color = "Département") +
    theme(legend.position="bottom", text = element_text(size = 20)) 
  
}

# -----------------------------------------------------------------------

comparer_annees_geom_errorbar <- function(variable, df) {
  
  df %>%   
    group_by(annee) %>% 
    summarise(et = sd(get(variable), na.rm = T),
              moy = mean(get(variable), na.rm = T),
              n = n(),
              ymin = moy - et / n^0.5,
              ymax = moy + et / n^0.5) %>% 
    ggplot(aes(x = as.factor(annee), y = moy, fill = as.factor(annee))) +
    geom_bar(stat = "Identity") +
    geom_pointrange(aes(ymin = ymin, ymax = ymax), colour = "white") +
    labs(title = variable, x = "", y = "") +
    geom_hline(yintercept = data_2ans %>% pull(get(variable)) %>%  mean(na.rm =T),
               linetype = "longdash", size = 0.7, col = "limegreen") +
    #    scale_fill_brewer(palette = "Dark2") +
    theme(legend.position = "none", text = element_text(size = 20)) +
    labs(title = paste0("Comparaison des moyennes", " (", variable, ")"))
  
  #  ggpubr::ggarrange(g1, g2,ncol = 2, nrow = 1)
  
}


